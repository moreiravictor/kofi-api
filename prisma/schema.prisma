generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coffee {
  id               String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt        DateTime? @map("deleted_at") @db.Timestamp(6)
  name             String
  roast            String
  tasteNotes       String    @map("taste_notes")
  elevation        Int?
  processingMethod String?   @map("processing_method")
  generalGrade     Decimal?  @map("general_grade") @db.Decimal(10, 2)
  internalGrade    Int?      @map("internal_grade")
  acidity          Int
  body             Int
  sweetness        Int?
  afterTaste       String?   @map("after_taste")
  category         String
  brandId          String    @map("brand_id") @db.Uuid
  brand            Brand     @relation(fields: [brandId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "coffee_brand_id_foreign")
  photoId          String    @map("photo_id") @db.Uuid
  Photo            Photo?    @relation(fields: [photoId], references: [id])
  Post             Post[]

  @@map("coffees")
}

model Brand {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  legalName   String    @map("legal_name")
  tradingName String    @map("trading_name")
  cnpj        String
  Coffee      Coffee[]
  photoId     String    @map("photo_id") @db.Uuid
  Photo       Photo?    @relation(fields: [photoId], references: [id])
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt   DateTime? @map("deleted_at") @db.Timestamp(6)

  @@map("brands")
}

enum PostType {
  TIP
  REVIEW
}

model Post {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title      String
  content    String
  likeAmount Int       @map("like_amount")
  userId     String    @map("user_id") @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "review_user_id_foreign")
  type       PostType
  photos     Photo[]
  Comment    Comment[]
  coffeeId   String?   @map("coffee_id") @db.Uuid
  Coffe      Coffee?   @relation(fields: [coffeeId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt  DateTime? @map("deleted_at") @db.Timestamp(6)

  @@map("posts")
}

model Comment {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content   String
  postId    String    @map("post_id") @db.Uuid
  Post      Post      @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_post_id_foreign")
  userId    String    @map("user_id") @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_user_id_foreign")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@map("comments")
}

model Photo {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  url       String
  Post      Post?     @relation(fields: [postId], references: [id])
  postId    String?   @db.Uuid
  User      User[]
  Coffee    Coffee[]
  Brand     Brand[]
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@map("photos")
}

model User {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String    @unique
  username  String
  password  String
  phone     String?
  uf        String?
  city      String?
  Post      Post[]
  Comment   Comment[]
  Photo     Photo?    @relation(fields: [photoId], references: [id])
  photoId   String    @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamp(6)

  @@map("users")
}
